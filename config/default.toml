### Reaper Configuration File ###

# StateFile = "savedstates.txt"
# LogFile = "log.txt"
WhitelistTag = "REAPER_SPARE_ME"
DefaultOwner = "reaper_notifications"
DefaultEmailHost = "mozilla.com"
EventTag = "env:default"

DryRun = true

[HTTP]
    # Set this to secure the tokens in the links back to the
    # web server.
    TokenSecret = "set this to secure web requests against spoofing"
    # this is used to generate the link back to the reaper's http
    # service. Do not add a trailing slash, just include
    # <scheme>://<host:port>
    ApiURL = "http://localhost:8000"

    # this is where the web server will listen for requests
    Listen = "localhost:8000"

    Token = "t"
    Action = "a"

[Logging]
    Extras = true

[States]
    # The time format must be a duration parsable by go's time.ParseDuration
    # function. See: http://godoc.org/time#ParseDuration
    #
    # Recommended to do things in hourly increments

    # Interval that all instances should be checked for reaping
    Interval = "20m"

    # Length of time for each state leading to the final state
    # to disable a state, make its duration 0 and remove its EventReporter triggers
    FirstStateDuration = "5m"
    SecondStateDuration = "5m"
    ThirdStateDuration = "10m"

[Events]

    # Triggers are one of ["first", "second", "third", "final", "ignore"]

    [Events.DatadogStatistics]
        Enabled = true
        # triggers N/A for statistics
        Triggers = []

    [Events.DatadogEvents]
        Enabled = false
        Triggers = []

    [Events.Email]
        Enabled = false
        Triggers = []

        Host = ""
        AuthType = "plain"

        # valid: "none", "md5" or "plain". Use "plain" for SES SMTP

        #Address = ""
        #AuthType = "none"

        Port = 587
        Username = ""
        Password = ""

        # must be parsable by http://godoc.org/net/mail#ParseAddress
        From = "AWS Reaper <reaper@reaper.com>"

        # Optional port, defaults to 587
        # Port = 587

    [Events.Tagger]
        Enabled = false
        Triggers = []

    [Events.Reaper]
        Enabled = false
        Triggers = []
        Mode = "Stop"

    [Events.Interactive]
        # Triggers = ["first", "second", "third", "final"]

[AWS]
    # what regions the reaper will look for ec2 servers in
    Regions      = [
        "us-west-1",
        "us-west-2",
        "us-east-1",
        "eu-west-1",
    ]

[AutoScalingGroups]
    Enabled = true

    [AutoScalingGroups.FilterGroups]
        [AutoScalingGroups.FilterGroups.1]
            [AutoScalingGroups.FilterGroups.1.1]
                function = "SizeGreaterThanOrEqualTo"
                arguments = ["1"]
            [AutoScalingGroups.FilterGroups.1.2]
                function = "CreatedTimeNotInTheLast"
                arguments = ["24h"]
            [AutoScalingGroups.FilterGroups.1.3]
                function = "IsDependency"
                arguments = ["false"]
        [AutoScalingGroups.FilterGroups.2]
            [AutoScalingGroups.FilterGroups.2.1]
                function = "Tagged"
                arguments = ["REAP_ME"]

[Instances]
    Enabled = true

    [Instances.FilterGroups]
        [Instances.FilterGroups.1]
            [Instances.FilterGroups.1.1]
                function = "LaunchTimeNotInTheLast"
                arguments = ["24h"]
            [Instances.FilterGroups.1.2]
                function = "State"
                arguments = ["running"]
            [Instances.FilterGroups.1.4]
                function = "IsDependency"
                arguments = ["false"]
            [Instances.FilterGroups.1.5]
                function = "AutoScaled"
                arguments = ["false"]
        [Instances.FilterGroups.2]
            [Instances.FilterGroups.2.1]
                function = "Tagged"
                arguments = ["REAP_ME"]

[SecurityGroups]
    Enabled = true

    [SecurityGroups.FilterGroups]
        [SecurityGroups.FilterGroups.1]
            [SecurityGroups.FilterGroups.1.1]
                function = "IsDependency"
                arguments = ["false"]
        [SecurityGroups.FilterGroups.2]
            [SecurityGroups.FilterGroups.2.1]
                function = "Tagged"
                arguments = ["REAP_ME"]

[Cloudformations]
    Enabled = true

    [Cloudformations.FilterGroups]
        [Cloudformations.FilterGroups.1]
            [Cloudformations.FilterGroups.1.1]
                function = "CreatedTimeNotInTheLast"
                arguments = ["24h"]
            [Cloudformations.FilterGroups.1.2]
                function = "Status"
                arguments = ["ROLLBACK_COMPLETE"]
            [Cloudformations.FilterGroups.1.3]
                function = "IsDependency"
                arguments = ["false"]
        [Cloudformations.FilterGroups.2]
            [Cloudformations.FilterGroups.2.1]
                function = "Tagged"
                arguments = ["REAP_ME"]

[Volumes]
    Enabled = true

    [Volumes.FilterGroups]
        [Volumes.FilterGroups.1]
            [Volumes.FilterGroups.1.1]
                function = "IsDependency"
                arguments = ["false"]
            [Volumes.FilterGroups.1.2]
                function = "State"
                arguments = ["available"]
            [Volumes.FilterGroups.1.3]
                function = "AttachmentState"
                arguments = ["detached"]
